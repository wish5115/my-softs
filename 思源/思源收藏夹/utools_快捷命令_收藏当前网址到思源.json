<!DOCTYPE html>
<html lang="zh">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>网址收藏</title>
  <script>
    //////////////// 参数配置 ////////////////
    // 预抓取服务器地址，为空使用思源内置文件读写实现
    const quickCommandServerUrl = '';
    // 预抓取快捷命令服务地址 当快捷命令服务不稳定时可以使用下面的思源内核扩展服务
    //const quickCommandServerUrl = 'http://127.0.0.1:33442';
    // 预抓取思源内核扩展服务 see https://ld246.com/article/1758444561920
    //const quickCommandServerUrl = 'http://127.0.0.1:6809';
    // 字段名映射，如果你字段改名了，需要在这里做调整
    const colsMaps = {
      link: '网址',
      tags: '标签',
      description: '摘要',
      note: '备注',
      linkTitle: '链接标题',
      linkUrl: '链接地址',
    };
    // 收藏页面指令名
    const commandName = '收藏当前网址到思源';
    // 配置页面指令名
    const commandConfigName = '收藏网址配置';
    // 搜索页面指令名
    const commandSearchName = '收藏网址搜索';
    // 搜索框内容为空时，默认显示的topN数量
    const defaultTopN = 10;
    // 是否检查网页内容发生改变
    const isCheckWebPageChanged = false;
    // 定义缓存文件路径，用于保存网页信息
    const webInfoCacheFile = '/data/storage/favorite_web_info_cache.txt';
  </script>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f5f5f5;
      padding: 10px;
      margin: 0;
      margin-top: -10px;
      min-height: 200px;
    }

    .form-container {
      max-width: 600px;
      margin: 0 auto;
      background-color: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .form-group {
      margin-bottom: 15px;
    }

    #myForm .form-group:last-of-type {
      margin-bottom: 10px;
    }

    #settings .form-group:last-of-type {
      margin-bottom: 5px;
    }

    label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
      color: #333;
    }

    input[type="text"],
    input[type="url"],
    input[type="password"],
    textarea {
      width: 100%;
      padding: 6px;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
      font-size: 16px;
    }

    textarea {
      height: 50px;
      resize: vertical;
    }

    .btn-save,
    .btn-delete,
    .btn-cancel,
    .btn-label-select {
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
      margin-top: 10px;
    }

    .btn-label-select {
      padding: 7px 20px;
    }

    .btn-save {
      background-color: #4285f5;
    }

    .btn-save:hover {
      background-color: #3367d6;
    }

    .btn-delete {
      float: right;
      background-color: #e74c3c;
    }

    .btn-delete:hover {
      background-color: #c0392b;
    }

    .btn-cancel,
    .btn-label-select {
      background-color: #f9f9f9;
      color: #333;
      margin-top: 0;
      margin-left: 0;
    }

    .btn-cancel:hover,
    .btn-label-select:hover {
      background-color: #f1f1f1;
    }

    #tags {
      width: calc(100% - 77px);
    }

    .error {
      color: red;
      font-size: 14px;
      margin-top: 5px;
      display: none;
    }

    input.invalid {
      border-color: red;
    }

    .ad {
      margin-bottom: 15px;
      color: #666;
      font-size: 14px;
      line-height: 1.5;
      padding: 10px;
      border-left: 3px solid #007bff;
      background-color: #f9f9f9;
      border-radius: 4px;
    }

    #status {
      font-size: 16px;
    }

    #saved-message {
      position: absolute;
      color: green;
      top: 5px;
      left: calc(50% - 74px);
    }

    #myForm,
    #settings,
    .ad,
    #status,
    #saved-message,
    #changed-message {
      display: none;
    }

    .form-header {
      position: relative;
      margin-bottom: 15px;
    }

    .settings-btn,
    .av-btn,
    .search-btn {
      position: absolute;
      top: 0;
      right: 0;
      background: none;
      border: none;
      font-size: 20px;
      cursor: pointer;
      color: #666;
      padding: 0;
      width: 30px;
      height: 30px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .av-btn {
      right: 35px;
    }

    .search-btn {
      right: 70px;
    }

    .settings-btn:hover,
    .av-btn:hover {
      color: #333;
    }

    #label-list,
    #av-list {
      position: absolute;
      background-color: white;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      z-index: 1000;
      display: none;
      max-height: 260px;
      overflow-y: auto;
      width: 200px;
    }

    #av-list {
      right: 35px;
    }

    #label-list div,
    #av-list div {
      padding: 8px 12px;
      cursor: pointer;
    }

    #label-list div:hover,
    #av-list div:hover {
      background-color: #f5f5f5;
    }

    .not-show-form-tip {
      display: none;
      color: green;
    }

    #search {
      display: none;
      min-height: 470px;
    }

    #myForm.show,
    #settings.show,
    .ad.show,
    #status.show,
    #saved-message.show,
    #search.show {
      display: block;
    }

    #changed-message.show {
      display: inline;
    }
    #saved-message:has(#changed-message.show) {
      left: calc(50% - 114px);
    }

    .checkmark {
      float: right;
      pointer-events: none;
    }

    /*.settings-btn svg{
      color: #262626;
      fill: currentColor;
    }*/
    .settings-btn svg:hover,
    .av-btn svg:hover,
    .search-btn:hover {
      opacity: 0.8;
    }

    /* === 新增：标签搜索样式（必要的样式，仅此处添加） === */
    #label-list .label-search {
      box-sizing: border-box;
      width: 100%;
      padding: 6px 8px;
      border: none;
      border-bottom: 1px solid #ddd;
      outline: none;
      font-size: 14px;
      position: sticky;
      top: 0;
      background-color: white;
      z-index: 1;
    }

    #label-search-list {
      outline: none;
      font-size: 14px;
      background-color: white;
      max-height: 410px;
      overflow-y: auto;
    }

    #label-search-list .label-item {
      padding: 12px;
      cursor: pointer;
      display: block;
      border-bottom: 1px solid #ddd;
    }

    #label-search-list .label-item:first-child {
      border-top: 1px solid #ddd;
    }

    #label-search-list .label-item:hover,
    #label-search-list .label-item.highlighted {
      background-color: #f0f6ff;
      /* 保持与 hover 协调的浅色背景 */
      font-weight: 600;
    }

    #label-list .label-item,
    #av-list .label-item {
      padding: 8px 12px;
      cursor: pointer;
      display: block;
    }

    /* 新增：键盘选中高亮样式（仅用于搜索交互） */
    #label-list .label-item.active,
    #av-list .label-item.active {
      background-color: #f0f6ff;
      /* 保持与 hover 协调的浅色背景 */
      font-weight: 600;
    }

    /* === 新增结束 === */

    #myForm .form-group:has(#linkIcon) {
      display: none;
    }

    #linkIconImg {
      cursor: pointer;
    }
  </style>
</head>

<body>
  <div class="form-container">
    <!-- status -->
    <div id="status"></div>
    <!-- ad -->
    <div class="ad">
      推荐免费AI平台：
      <a href="javascript:;" onclick="utools.shellOpenExternal('https://cloud.siliconflow.cn/i/8kP68u0B')"
        style="color: #007bff; font-weight: bold;">硅基流动</a>
      &nbsp;&nbsp;
      国外AI平台：
      <a href="javascript:;" onclick="utools.shellOpenExternal('https://api.gpt.ge/register?aff=GlNE')"
        style="color: #28a745; font-weight: bold;">V-API</a>&nbsp;
      <span style="color: #888; font-size: 13px;">模型多、稳定快速，价格比官方更划算。</span>
    </div>

    <!-- 收藏表单 -->
    <form id="myForm">
      <div class="form-header">
        <h2 style="margin: 0;">网址收藏</h2>
        <button type="button" class="search-btn" title="搜索">
          <svg t="1759714249029" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"
            p-id="4936" width="24" height="24">
            <path
              d="M762.752 736.704a368 368 0 1 0-48 42.432l158.592 158.72a32 32 0 0 0 45.312-45.312l-155.904-155.84zM496 179.2a304 304 0 1 1 0 608 304 304 0 0 1 0-608z"
              fill="#263140" p-id="4937"></path>
          </svg>
        </button>
        <button type="button" class="av-btn" title="数据库">
          <svg width="24" height="24" t="1759308148108" class="icon" viewBox="0 0 1024 1024" version="1.1"
            xmlns="http://www.w3.org/2000/svg" p-id="10803">
            <path
              d="M512 128c204.330667 0 371.370667 72.96 383.317333 164.992l0.554667 5.845333L896 725.333333c0 96.938667-168.533333 170.666667-384 170.666667s-384-73.728-384-170.666667V298.666667c5.802667-94.72 175.488-170.666667 384-170.666667z m320 480.128C763.776 653.696 647.125333 682.666667 512 682.666667c-129.493333 0-242.005333-26.624-311.210667-68.906667l-8.789333-5.632V725.333333c0 0.682667 0.085333 1.536 0.213333 2.474667l0.853334 3.285333 0.682666 1.92 2.048 4.309334c6.784 12.416 24.704 31.445333 69.290667 51.2C323.968 814.506667 410.666667 832 512 832s188.032-17.493333 246.912-43.52c44.586667-19.712 62.506667-38.741333 69.290667-51.157333l2.048-4.309334 0.682666-1.92 0.853334-3.285333L832 725.333333v-117.205333z m0-210.517333C763.221333 442.026667 645.546667 469.333333 512 469.333333s-251.221333-27.306667-320-71.722666V512c0 0.682667 0.085333 1.536 0.213333 2.474667l0.853334 3.285333 0.682666 1.92 2.048 4.309333c6.784 12.416 24.704 31.445333 69.290667 51.2C323.968 601.173333 410.666667 618.666667 512 618.666667s188.032-17.493333 246.912-43.52c44.586667-19.712 62.506667-38.741333 69.290667-51.157334l2.048-4.309333 0.682666-1.92 0.853334-3.285333L832 512V397.610667zM512 192c-98.986667 0-185.557333 18.474667-244.906667 45.653333-42.410667 19.370667-61.44 38.016-69.546666 50.944l-2.688 4.821334-1.706667 4.181333-0.554667 1.792-0.554666 2.986667v2.133333l0.469333 2.56 1.152 3.413333c4.522667 11.093333 20.565333 31.744 71.68 53.333334 59.52 25.173333 146.56 41.514667 246.656 41.514666 100.096 0 187.136-16.384 246.613333-41.514666 51.2-21.589333 67.2-42.24 71.722667-53.333334l1.152-3.413333 0.512-3.072-0.256-2.986667a24.746667 24.746667 0 0 0-0.853333-3.413333l-1.706667-4.181333-2.730667-4.821334c-8.106667-12.928-27.136-31.573333-69.546666-50.986666C697.6 210.474667 610.986667 192 512 192z"
              fill="#000000" p-id="10804"></path>
          </svg>
        </button>
        <div id="av-list">
        </div>
        <button type="button" class="settings-btn" title="设置">
          <svg t="1758885897830" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"
            p-id="5070" width="24" height="24">
            <path
              d="M439.816 101.851c-8.631-16.952-28.007-25.48-46.337-20.396-70.066 19.435-133.165 55.501-184.82 103.628-12.909 12.028-16.413 31.094-8.623 46.926 5.374 10.92 8.414 23.234 8.414 36.376 0 45.555-36.833 82.347-82.1 82.347-0.381 0-0.762-0.003-1.142-0.008-17.691-0.253-33.448 11.147-38.74 28.031C73.159 421.209 66 466.344 66 513.078c0 30.844 3.118 61.001 9.07 90.156 4.1 20.082 22.714 33.816 43.111 31.808a83.069 83.069 0 0 1 8.169-0.399c45.267 0 82.1 36.791 82.1 82.346 0 20.276-7.254 38.74-19.334 53.086-13.177 15.649-12.423 38.718 1.748 53.472 52.742 54.916 119.403 96.417 194.376 118.784 20.888 6.231 42.918-5.408 49.543-26.174 10.616-33.275 41.714-57.212 78.217-57.212s67.601 23.937 78.217 57.212c6.625 20.766 28.655 32.405 49.543 26.174 74.973-22.367 141.634-63.868 194.376-118.784 14.17-14.755 14.924-37.823 1.748-53.471-12.08-14.346-19.334-32.811-19.334-53.087 0-45.554 36.834-82.346 82.1-82.346 2.773 0 5.496 0.135 8.169 0.399 20.397 2.008 39.011-11.726 43.111-31.808 5.951-29.155 9.07-59.312 9.07-90.156 0-46.734-7.16-91.869-20.468-134.323-5.292-16.884-21.049-28.285-38.741-28.031-0.379 0.005-0.76 0.008-1.141 0.008-45.266 0-82.1-36.792-82.1-82.347 0-13.142 3.04-25.456 8.414-36.376 7.79-15.832 4.286-34.898-8.623-46.926-51.655-48.127-114.754-84.193-184.82-103.628-18.33-5.084-37.706 3.444-46.337 20.396-13.648 26.806-41.357 44.97-73.184 44.97-31.827 0-59.536-18.164-73.184-44.97zM288.45 268.385c0-14.471-1.9-28.535-5.47-41.936 31.114-25.118 66.377-45.232 104.576-59.156 29.686 36.285 74.82 59.528 125.444 59.528 50.624 0 95.758-23.243 125.444-59.528 38.199 13.924 73.462 34.038 104.576 59.156a162.748 162.748 0 0 0-5.47 41.936c0 79.513 57.113 145.772 132.604 159.667 6.434 27.261 9.846 55.723 9.846 85.026 0 14.581-0.845 28.951-2.485 43.065-79.109 10.814-139.965 78.769-139.965 160.846 0 26.162 6.201 50.922 17.202 72.84-30.829 27.076-66.197 49.043-104.786 64.612-28.717-45.337-79.271-75.496-136.966-75.496-57.695 0-108.249 30.159-136.966 75.496-38.589-15.569-73.957-37.536-104.787-64.612 11.002-21.918 17.203-46.678 17.203-72.84 0-82.077-60.856-150.032-139.965-160.846A373.007 373.007 0 0 1 146 513.078c0-29.304 3.411-57.765 9.845-85.026 75.492-13.894 132.605-80.154 132.605-159.667zM513 336c-97.202 0-176 78.798-176 176s78.798 176 176 176 176-78.798 176-176-78.798-176-176-176zM409 512c0-57.438 46.562-104 104-104s104 46.562 104 104-46.562 104-104 104-104-46.562-104-104z"
              fill="#262626" p-id="5071"></path>
          </svg>
        </button>
        <div id="saved-message">✅本网址已收藏<span id="changed-message">（有更新）</span> <a id="view-saved" href="javascript:;">查看</a></div>
      </div>
      <div class="form-group">
        <label for="title">标题</label>
        <input type="text" id="title" name="title" required>
        <div class="error" id="title-error">标题不能为空</div>
      </div>
      <div class="form-group">
        <label for="link">链接&nbsp;&nbsp;<a href="javascript:;" id="btn-linkIcon">显示图标</a><a id="btnReGet"
            href="javascript:;" style="float:right;">重新获取</a></label>
        <input type="url" id="link" name="link" required>
        <div class="error" id="link-error">链接不能为空</div>
      </div>
      <div class="form-group">
        <label for="linkIcon">网站图标</label>
        <img src="" id="linkIconImg" style="width:32px;vertical-align:middle;" /> <input type="url" id="linkIcon" name="linkIcon" style="width:calc(100% - 37px);">
      </div>
      <div class="form-group">
        <label for="tags">标签</label>
        <input type="text" id="tags" name="tags" value="" placeholder="多个用逗号隔开，支持中文或英文逗号">
        <button type="button" class="btn-label-select">选择</button>
        <div id="label-list">
          <input type="text" class="label-search" placeholder="搜索标签..." />
        </div>
      </div>
      <div class="form-group">
        <label for="note">摘要</label>
        <textarea id="description" name="description"></textarea>
      </div>
      <div class="form-group">
        <label for="note">备注</label>
        <textarea id="note" name="note"></textarea>
      </div>
      <button type="submit" class="btn-save">保存</button>
      <button type="button" class="btn-cancel" id="btn-cancel">关闭</button>
      <button type="button" class="btn-delete" id="btn-delete">删除</button>
    </form>

    <!-- 设置表单 -->
    <form id="settings">
      <!-- 常规 设置部分 -->
      <div class="form-header" style="display: flex; align-items: center; gap: 10px;">
        <h2 style="margin: 0;">设置</h2>
        <div style="color:#666">设置后在下次打开时生效</div>
      </div>
      <div class="form-group">
        <label for="token">思源Token</label>
        <input type="password" id="token" name="token" placeholder="请输入思源token，可在链滴-用户-设置-账号中查看" required>
      </div>
      <div class="form-group">
        <label for="token">思源Api地址和端口</label>
        <input type="text" id="apiUrlPort" name="apiUrlPort" placeholder="url和端口之间用英文冒号隔开" value="http://127.0.0.1:6806"
          required>
      </div>
      <div class="form-group">
        <label for="token">思源收藏数据库ID（多个用英文或中文逗号隔开，默认使用第一个）</label>
        <input type="text" id="avIds" name="avIds" placeholder="可在块右键菜单中复制" value="" required>
      </div>
      <div class="form-group">
        <label>收藏面板，是否显示提交表单</label>
        <label><input type="radio" name="showRadio" value="yes" checked> 显示</label>
        <label><input type="radio" name="showRadio" value="no" id="notShowFormRadio"> 不显示（直接保存）<span
            class="not-show-form-tip">可通过uTools“收藏网址配置”指令再次打开本设置</span></label>
      </div>
      <div class="form-group">
        <label>切换数据库时，是否显示确认框？</label>
        <label><input type="checkbox" id="onSwitchAvShowTips" name="onSwitchAvShowTips" checked> 显示确认框</label>
      </div>
      <div class="form-group">
        <label>重新获取时，是否显示确认框？</label>
        <label><input type="checkbox" id="onReGetShowTips" name="onReGetShowTips" checked> 显示确认框</label>
      </div>
      <div class="form-group">
        <label>是否支持从剪贴中板获取链接</label>
        <label><input type="checkbox" id="isGetLinkFromClipboard" name="isGetLinkFromClipboard" checked> 支持从剪贴中板获取</label>
      </div>
      <div class="form-group">
        <label>当搜索框内容为空时，是否默认显示topN收藏</label>
        <label><input type="checkbox" id="showTopNWhenSearchInputEmpty" name="showTopNWhenSearchInputEmpty" checked> 显示topN收藏</label>
      </div>
      <div class="form-group">
        <label>点击关闭按钮时，是否同时隐藏uTools主面板</label>
        <label><input type="checkbox" id="isHideUtoolsWhenClose" name="isHideUtoolsWhenClose" checked>
          同时隐藏uTools主面板</label>
      </div>
      <div class="form-group">
        <label>是否自动抓取网页标签</label>
        <label><input type="checkbox" id="checkboxLabel" name="checkboxLabel" checked> 自动抓取标签</label>
      </div>
      <div class="form-group">
        <label>是否自动抓取摘要</label>
        <label><input type="checkbox" id="checkboxDescription" name="checkboxDescription" checked> 自动抓取摘要</label>
      </div>
      <div class="form-group">
        <label>是否抓取网站图标</label>
        <label><input type="checkbox" id="checkboxIcon" name="checkboxIcon" checked> 抓取网站图标</label>
      </div>
      <div class="form-group">
        <label>保存成功后是否显示通知</label>
        <label><input type="checkbox" id="checkboxShowNotification" name="checkboxShowNotification"> 显示通知</label>
      </div>
      <div class="form-group">
        <label>是否开启预抓取服务</label>
        <label><input type="checkbox" id="checkboxQuickCommandServer" name="checkboxQuickCommandServer">
          开启预抓取服务（需要先安装“思源收藏夹预抓取”油猴脚本，服务端默认使用思源文件读写api存储抓取信息）</label>
      </div>

      <!-- AI 设置部分 -->
      <!-- <div class="form-header">
        <h2 style="margin: 0;">AI 设置</h2>
      </div>
      <div style="margin-bottom: 15px;color:#666;">用于生成文章摘要，不填则使用默认AI，为保证稳定性建议使用自己的API</div>
      <div style="margin-bottom: 15px;color:#666;">推荐免费AI平台：<a
          href="https://cloud.siliconflow.cn/i/8kP68u0B">硅基流动</a>&nbsp;&nbsp;&nbsp;&nbsp;国外AI平台：<a
          href="https://api.gpt.ge/register?aff=GlNE">V-API</a> 模型多稳定省心比官方划算</div>
      <div class="form-group">
        <label for="api-url">API URL</label>
        <input type="text" id="api-url" name="api-url" placeholder="">
      </div>
      <div class="form-group">
        <label for="api-token">API Token</label>
        <input type="password" id="api-token" name="api-token" placeholder="">
      </div>
      <div class="form-group">
        <label for="api-model">API Model</label>
        <input type="text" id="api-model" name="api-model" placeholder="">
      </div> -->

      <button type="submit" class="btn-save">保存</button>
      <button type="button" class="btn-cancel">关闭</button>
    </form>

    <form id="search">
      <div class="form-group">
        <label>搜索<a href="javascript:;" id="btn-search-back" style="float:right">返回</a>&nbsp;&nbsp;</label>
        <label><input type="text" id="searchInput" name="searchInput" class="label-search"
            placeholder="请输入搜索关键词"></label>
      </div>
      <div id="label-search-list">
      </div>
    </form>
  </div>
  <template id="clipboard">
    <!--[[TEMPLATE-CLIPBOARD-DATA[[-->
    {{ClipText}}
    <!--]]TEMPLATE-CLIPBOARD-DATA]]-->
  </template>

  <script>
    // 获取已存储配置
    const config = quickcommand.userData.get("config") || {};
    // 获取输入文本
    const input = `{{input}}`;
    // 判断是否设置页面
    const isConfigPage = `{{payload}}` === commandConfigName;
    // 判断是否搜索页面
    const isSearchPage = `{{payload}}` === commandSearchName;
    // 是否显示表单，不显示表单则直接保存
    const isShowForm = !config?.isShowFormVal || config?.isShowFormVal === 'yes' || isConfigPage || isSearchPage;
    // 判断是否后台保存
    const isBgSave = !isConfigPage && !isSearchPage && !isShowForm;

    let apiUrlPort = 'http://127.0.0.1:6806';

    let currentBrowserUrl = '';

    let isBrowser = false;

    config.autoLabel = config.autoLabel === undefined ? 'yes' : config.autoLabel;
    config.autoDescription = config.autoDescription === undefined ? 'yes' : config.autoDescription;
    config.showNotification = config.showNotification === undefined ? 'no' : config.showNotification;
    config.addIcon = config.addIcon === undefined ? 'yes' : config.addIcon;
    config.onSwitchAvShowTips = config.onSwitchAvShowTips === undefined ? 'yes' : config.onSwitchAvShowTips;
    config.onReGetShowTips = config.onReGetShowTips === undefined ? 'yes' : config.onReGetShowTips;
    config.isGetLinkFromClipboard = config.isGetLinkFromClipboard === undefined ? 'yes' : config.isGetLinkFromClipboard;
    config.isHideUtoolsWhenClose = config.isHideUtoolsWhenClose === undefined ? 'yes' : config.isHideUtoolsWhenClose;
    config.showTopNWhenSearchInputEmpty = config.showTopNWhenSearchInputEmpty === undefined ? 'yes' : config.showTopNWhenSearchInputEmpty;
    config.avId = config.avId || config.avIds?.split(/[,，]/)?.map(id => id.trim())?.filter(Boolean)[0] || '';

    async function main() {
      if(!config.avId || !config.token) console.error('请先设置收藏夹数据库id和思源api token');
      try {
        // 判断来源是收藏还是设置
        const form = document.querySelector('#myForm');
        const settings = document.querySelector('#settings');
        const ad = document.querySelector('.ad');
        const status = document.querySelector('#status');
        const search = document.querySelector('#search');
        const searchInput = document.querySelector('#searchInput');
        if (isConfigPage) {
          // 配置页面
          ad.classList.add('show');
          settings.classList.add('show');
          form.classList.remove('show');
          search.classList.remove('show');
        } else if (isSearchPage) {
          // 搜索页面
          ad.classList.add('show');
          search.classList.add('show');
          settings.classList.remove('show');
          form.classList.remove('show');
          search.querySelector('#btn-search-back').style.display = 'none';
          setTimeout(() => {
            searchInput.focus();
            searchInput.dispatchEvent(new InputEvent('input', { bubbles: true }));
          }, 200);
        } else if (isShowForm) {
          // 显示表单页面
          ad.classList.add('show');
          form.classList.add('show');
          settings.classList.remove('show');
          search.classList.remove('show');
        } else {
          // 不显示表单页面(后台保存)
          ad.classList.remove('show');
          form.classList.remove('show');
          settings.classList.remove('show');
          search.classList.remove('show');
          status.innerHTML = '正在保存...';
          status.classList.add('show');
        }

        // 获取当前浏览器地址（兼容思源app）
        let isValidUrl = true;
        if (/^http/i.test(input)) {
          currentBrowserUrl = input; // 主窗口输入
        } else {
          try {
            // 浏览器窗口获取当前URL
            currentBrowserUrl = await utools.readCurrentBrowserUrl();
            //let currentBrowserUrl = utools.getCurrentBrowserUrl();
            isBrowser = true;
          } catch (e) {
            // do nothing
          }
          // 尝试从剪切板获取
          if (!currentBrowserUrl && config.isGetLinkFromClipboard === 'yes') {
            const clipboardText = readClipboard();
            if (clipboardText && /^http/i.test(clipboardText)) currentBrowserUrl = clipboardText;
          }
        }

        if (!currentBrowserUrl && !isConfigPage && !isSearchPage) {
          isValidUrl = false;
          if (`{{payload}}` !== commandName) {
            console.error('不是有效的URL');
          }
        }

        // 初始化表单数据
        if (!isConfigPage && !isSearchPage && isShowForm) {
          // 获取表单标签
          const avTags = await getAllTags(config.avId);
          const tagListEl = document.querySelector("#label-list");
          avTags.forEach(tag => {
            // <div data-label="娱乐">娱乐</div>
            const option = document.createElement('div');
            option.setAttribute('data-label', tag);
            option.textContent = tag;
            option.className = 'label-item';
            tagListEl.appendChild(option);
          });
        }
        if (!isConfigPage && !isSearchPage && isShowForm && isValidUrl) {
          // 表单提交页面获取数据
          const getFormData = async (currentBrowserUrl, reGet = false) => {
            const title = document.querySelector("#title");
            const tags = document.querySelector("#tags");
            const description = document.querySelector("#description");
            const link = document.querySelector("#link");
            const icon = document.querySelector("#linkIcon");
            const iconImg = document.querySelector("#linkIconImg");
            const note = document.querySelector("#note");
            const btnReGet = document.querySelector("#btnReGet");
            const savedMessage = document.querySelector("#saved-message");
            const changedMessage = document.querySelector("#changed-message");
            if (reGet) {
              savedMessage.classList.remove('show');
              changedMessage.classList.remove('show');
              title.value = '';
              tags.value = '';
              description.value = '';
              icon.value = '';
              iconImg.src = '';
              note.value = '';
            }
            document.querySelector("#link").value = currentBrowserUrl;
            const hasFavorite = await isExistLink(currentBrowserUrl);
            if (hasFavorite) {
              document.querySelector("#saved-message").classList.add('show');
            }
            // 抓取网页信息
            (async () => {
              title.placeholder = '正在获取...';
              if (config.autoLabel === 'yes') tags.placeholder = '正在获取...';
              if (config.autoDescription === 'yes') description.placeholder = '正在获取...';
              if (config.addIcon === 'yes') icon.placeholder = '正在获取...';
              setTimeout(() => {
                if (title.placeholder) title.placeholder = '';
                if (config.autoLabel === 'yes' && tags.placeholder) tags.placeholder = '';
                if (config.autoDescription === 'yes' && description.placeholder) description.placeholder = '';
                if (config.addIcon === 'yes' && icon.placeholder) icon.placeholder = '';
              }, 65000);
              const docInfo = await getWebInfo(currentBrowserUrl);
              const row = await getRowByLink(currentBrowserUrl);
              if (!hasFavorite || !row) {
                // 未收藏或数据库不存在行数据(添加表单)
                if (docInfo.title) title.value = docInfo.title;
                if (config.autoLabel === 'yes' && docInfo.keywords) tags.value = docInfo.keywords;
                if (config.autoDescription === 'yes' && docInfo.description) description.value = docInfo.description;
                if (config.addIcon === 'yes' && docInfo.icon) {icon.value = docInfo.icon;iconImg.src = docInfo.icon;}
                document.getElementById('btn-delete').style.display = 'none';
              } else {
                // 已收藏且存在行数据（更新表单）
                document.getElementById('btn-delete').style.display = 'inline-block';
                document.getElementById('btn-delete').dataset.id = row.id;
                let isChanged = false;
                const cells = row.cells || row.values || [];
                cells.forEach(cell => {
                  if (cell.name === colsMaps.link) {
                    cell.value[cell.valueType].forEach(cell => {
                      if (cell.type === 'image') {
                        if (reGet) {icon.value = (config.addIcon ? docInfo.icon : '') || cell.content || '';iconImg.src = icon.value;}
                        else {icon.value = cell.content || (config.addIcon ? docInfo.icon : '') || '';iconImg.src = icon.value;}
                        if(cell.content !== docInfo.icon) isChanged = true;
                      } else {
                        if (reGet) title.value = docInfo.title || cell.name || '';
                        else title.value = cell.name || docInfo.title || '';
                        if(cell.name !== docInfo.title) isChanged = true;
                      }
                    });
                  }
                  if (cell.name === colsMaps.tags) {
                    let tagList = cell.value[cell.valueType] || [];
                    tagList = tagList.map(tag => tag.content);
                    const oldTags = tagList.join(',');
                    let webTags = docInfo.keywords.split(/[,，]/)?.map(tag => tag.trim())?.filter(tag => tag);
                    if (reGet && config.autoLabel === 'yes' && docInfo.keywords) {
                      webTags?.forEach(tag => {
                        if (!tagList.includes(tag)) {
                          tagList.push(tag);
                        }
                      });
                    }
                    tags.value = (tagList.join(',') || '') + (tags.value ? (',' + tags.value) : '');
                    if(oldTags !== webTags.join(',')) isChanged = true;
                  }
                  if (cell.name === colsMaps.description) {
                    const { content } = cell.value[cell.valueType];
                    if (reGet) {
                      description.value = (config.autoDescription === 'yes' ? docInfo.description : '') || content || '';
                    } else {
                      description.value = content || (config.autoDescription === 'yes' ? docInfo.description : '') || '';
                    }
                    if(content !== docInfo.description) isChanged = true;
                  }
                  if (cell.name === colsMaps.note) {
                    const { content } = cell.value[cell.valueType];
                    note.value = (content || '') + (note.value ? ('\n' + note.value) : '');
                  }
                });
                if(isCheckWebPageChanged && isChanged) {
                  changedMessage.classList.add('show');
                }
              }
              title.placeholder = '';
              if (config.autoLabel === 'yes') tags.placeholder = '';
              if (config.autoDescription === 'yes') description.placeholder = '';
              if (config.addIcon === 'yes') icon.placeholder = '';
              btnReGet.textContent = '重新获取';
            })();
          };
          getFormData(currentBrowserUrl);
          btnReGet.dataset.lastUrl = currentBrowserUrl;
          link.addEventListener('input', (e) => {
            e.preventDefault();
            const newUrl = document.querySelector("#link").value.trim();
            if (!newUrl || !/^http/i.test(newUrl)) return;
            if (newUrl === btnReGet.dataset.lastUrl) {
              btnReGet.textContent = '重新获取';
            } else {
              btnReGet.textContent = '用新地址重新获取';
            }
          });
          btnReGet.addEventListener('click', async (e) => {
            e.preventDefault();
            const newUrl = document.querySelector("#link").value.trim();
            if (!newUrl || !/^http/i.test(newUrl)) return;
            if (config.onReGetShowTips === 'yes' && !(await quickcommand.showConfirmBox("重新获取将使用网页新数据覆盖旧数据且当前已修改但未保存的数据将会丢失，确定继续吗？", "警告", false, 450))) {
              return;
            }
            btnReGet.dataset.lastUrl = newUrl;
            getFormData(newUrl, true);
          });
        } else if (!isConfigPage && !isSearchPage && isValidUrl) {
          // 后台保存收藏数据
          const isExisted = await isExistLink(currentBrowserUrl);
          if (isExisted) {
            // 后台，已收藏，更新
            if (!(await quickcommand.showConfirmBox("该网址已收藏，继续保存将用最新数据覆盖旧数据，还要继续吗？", "警告", false, 450))) {
              utools.hideMainWindow();
              utools.outPlugin();
              return;
            }
            const docInfo = await getWebInfo(currentBrowserUrl);
            const row = await getRowByLink(currentBrowserUrl);
            const cells = row?.cells || row?.values || [];
            const data = {
              link: { name: '', content: currentBrowserUrl, icon: '' },
              tags: '',
              description: '',
              note: '',
              linkTitle: '',
              linkUrl: currentBrowserUrl,
            };
            cells.forEach(cell => {
              if (cell.name === colsMaps.link) {
                cell.value[cell.valueType]?.forEach(cell => {
                  if (cell.type === 'image') {
                    data.link.icon = (config.addIcon ? docInfo.icon : '') || cell.content || '';
                  } else {
                    data.link.name = docInfo.title || cell.name || '';
                    data.linkTitle = docInfo.title || cell.name || '';
                  }
                });
              }
              if (cell.name === colsMaps.tags) {
                let tagList = cell.value[cell.valueType] || [];
                tagList = tagList.map(tag => tag.content);
                if (config.autoLabel === 'yes' && docInfo.keywords) {
                  const webTags = docInfo.keywords.split(/[,，]/)?.map(tag => tag.trim())?.filter(tag => tag);
                  webTags?.forEach(tag => {
                    if (!tagList.includes(tag)) {
                      tagList.push(tag);
                    }
                  });
                }
                data.tags = (tagList.join(',') || '');
              }
              if (cell.name === colsMaps.description) {
                const { content } = cell.value[cell.valueType];
                data.description = (config.autoDescription === 'yes' ? docInfo.description : '') || content || '';
              }
              if (cell.name === colsMaps.note) {
                const { content } = cell.value[cell.valueType];
                data.note = (content || '');
              }
            });
            await saveData(data);
          } else {
            // 后台，未收藏，新增
            const docInfo = await getWebInfo(currentBrowserUrl);
            await saveData({
              link: { name: docInfo.title || '', content: currentBrowserUrl, icon: (config.addIcon ? docInfo.icon : '') || '' },
              tags: (config.autoLabel === 'yes' ? docInfo.keywords : '') || '',
              description: (config.autoDescription === 'yes' ? docInfo.description : '') || '',
              note: '',
              linkTitle: docInfo.title || '',
              linkUrl: currentBrowserUrl,
            });
          }
        }
        // 获取设置表单数据
        document.querySelector('#token').value = config.token || '';
        document.querySelector('#apiUrlPort').value = config.apiUrlPort || apiUrlPort;
        apiUrlPort = config.apiUrlPort ? config.apiUrlPort : apiUrlPort;
        document.querySelector('#avIds').value = config.avIds || '';
        if (config.isShowFormVal === 'yes' || config.isShowFormVal === undefined) document.querySelector('#settings input[name="showRadio"][value="yes"]').checked =
          true;
        else document.querySelector('#settings input[name="showRadio"][value="no"]').checked = true;
        if (config.autoLabel === 'yes' || config.autoLabel === undefined) document.querySelector('#settings input[name="checkboxLabel"]').checked =
          true;
        else document.querySelector('#settings input[name="checkboxLabel"]').checked = false;
        if (config.autoDescription === 'yes' || config.autoDescription === undefined) document.querySelector('#settings input[name="checkboxDescription"]').checked =
          true;
        else document.querySelector('#settings input[name="checkboxDescription"]').checked = false;
        if (config.useQuickCommandServer === 'yes') document.querySelector('#settings input[name="checkboxQuickCommandServer"]').checked =
          true;
        else document.querySelector('#settings input[name="checkboxQuickCommandServer"]').checked = false;
        if (config.showNotification === 'yes' || config.showNotification === undefined) document.querySelector('#settings input[name="checkboxShowNotification"]').checked =
          true;
        else document.querySelector('#settings input[name="checkboxShowNotification"]').checked = false;
        if (config.addIcon === 'yes' || config.addIcon === undefined) document.querySelector('#settings input[name="checkboxIcon"]').checked =
          true;
        else document.querySelector('#settings input[name="checkboxIcon"]').checked = false;
        if (config.onSwitchAvShowTips === 'yes' || config.onSwitchAvShowTips === undefined) {
          document.querySelector('#settings input[name="onSwitchAvShowTips"]').checked = true;
        } else {
          document.querySelector('#settings input[name="onSwitchAvShowTips"]').checked = false;
        }
        if (config.onReGetShowTips === 'yes' || config.onReGetShowTips === undefined) {
          document.querySelector('#settings input[name="onReGetShowTips"]').checked = true;
        } else {
          document.querySelector('#settings input[name="onReGetShowTips"]').checked = false;
        }
        if (config.isGetLinkFromClipboard === 'yes' || config.isGetLinkFromClipboard === undefined) {
          document.querySelector('#settings input[name="isGetLinkFromClipboard"]').checked = true;
        } else {
          document.querySelector('#settings input[name="isGetLinkFromClipboard"]').checked = false;
        }
        if (config.isHideUtoolsWhenClose === 'yes' || config.isHideUtoolsWhenClose === undefined) {
          document.querySelector('#settings input[name="isHideUtoolsWhenClose"]').checked = true;
        } else {
          document.querySelector('#settings input[name="isHideUtoolsWhenClose"]').checked = false;
        }
        if(config.showTopNWhenSearchInputEmpty === 'yes' || config.showTopNWhenSearchInputEmpty === undefined) {
          document.querySelector('#settings input[name="showTopNWhenSearchInputEmpty"]').checked = true;
        } else {
          document.querySelector('#settings input[name="showTopNWhenSearchInputEmpty"]').checked = false;
        }

        // 设置提交
        document.getElementById('settings').addEventListener('submit', function (e) {
          e.preventDefault();
          quickcommand.userData.put({
            isShowFormVal: document.querySelector('#settings input[name="showRadio"]:checked').value,
            token: document.querySelector('#token').value,
            apiUrlPort: document.querySelector('#apiUrlPort').value,
            avIds: document.querySelector('#avIds').value,
            autoLabel: document.querySelector('#settings input[name="checkboxLabel"]').checked ? 'yes' : 'no',
            autoDescription: document.querySelector('#settings input[name="checkboxDescription"]').checked ? 'yes' : 'no',
            useQuickCommandServer: document.querySelector('#settings input[name="checkboxQuickCommandServer"]').checked ? 'yes' : 'no',
            showNotification: document.querySelector('#settings input[name="checkboxShowNotification"]').checked ? 'yes' : 'no',
            onSwitchAvShowTips: document.querySelector('#settings input[name="onSwitchAvShowTips"]').checked ? 'yes' : 'no',
            onReGetShowTips: document.querySelector('#settings input[name="onReGetShowTips"]').checked ? 'yes' : 'no',
            isGetLinkFromClipboard: document.querySelector('#settings input[name="isGetLinkFromClipboard"]').checked ? 'yes' : 'no',
            addIcon: document.querySelector('#settings input[name="checkboxIcon"]').checked ? 'yes' : 'no',
            isHideUtoolsWhenClose: document.querySelector('#settings input[name="isHideUtoolsWhenClose"]').checked ? 'yes' : 'no',
            showTopNWhenSearchInputEmpty: document.querySelector('#settings input[name="showTopNWhenSearchInputEmpty"]').checked ? 'yes' : 'no',
          }, "config", false);
          if (isConfigPage) {
            if (config.isHideUtoolsWhenClose === 'yes') {
              utools.hideMainWindow();
            }
            utools.outPlugin();
          } else {
            ad.classList.add('show');
            form.classList.add('show');
            settings.classList.remove('show');
            quickcommand.showMessageBox("保存成功，将在下次打开时生效", "success");
          }
        });

        const avBtn = document.querySelector('.av-btn');
        const avList = document.getElementById('av-list');

        document.querySelector('.av-btn').addEventListener('click', async function (e) {
          e.preventDefault();
          if (avList.style.display === 'block') {
            avList.style.display = 'none';
          } else {
            if (avList.children.length === 0) {
              const avs = await getAvsByAvIds(config.avIds);
              avs.forEach(av => {
                // <div data-label="娱乐">娱乐</div>
                const option = document.createElement('div');
                option.setAttribute('data-label', av.name);
                option.setAttribute('data-id', av.id);
                option.textContent = av.name;
                option.className = 'label-item';
                if (av.id === config.avId) {
                  const span = document.createElement('span');
                  span.textContent = ' ✓';
                  span.className = 'checkmark';
                  option.appendChild(span);
                }
                avList.appendChild(option);
              });
            }
            avList.style.display = 'block';
          }
        });

        // 切换数据库
        avList.addEventListener('click', async function (e) {
          if (e.target && e.target.hasAttribute('data-id')) {
            const selectedLabelEl = e.target.closest('[data-id]');
            const selectedLabelId = selectedLabelEl.getAttribute('data-id');
            if (selectedLabelId === config.avId) return;
            if (config.onSwitchAvShowTips === 'yes') {
              if (!(await quickcommand.showConfirmBox("切换数据库当前已修改但未保存的数据将会丢失，确定继续吗？", "警告", false, 450))) {
                avList.style.display = 'none';
                return;
              }
            }
            avList.querySelector('span.checkmark').remove();
            const span = document.createElement('span');
            span.textContent = ' ✓';
            span.className = 'checkmark';
            selectedLabelEl.appendChild(span);
            //config.avId = selectedLabelId;
            // 重新配置avIds
            const conf = quickcommand.userData.get("config");
            conf.avIds = reorderAvIdsStrict(conf.avIds, selectedLabelId.trim());
            quickcommand.userData.put(conf, "config", false);
            document.querySelector('#avIds').value = conf.avIds;
            avList.style.display = 'none';
            utools.redirect(commandName);
          }
        });

        // 收藏表单提交
        document.getElementById('myForm').addEventListener('submit', async function (e) {
          e.preventDefault();

          const title = document.getElementById('title');
          const link = document.getElementById('link');
          const tags = document.getElementById('tags');
          const description = document.getElementById('description');
          const note = document.getElementById('note');
          const icon = document.getElementById('linkIcon');
          const titleError = document.getElementById('title-error');
          const linkError = document.getElementById('link-error');

          let isValid = true;

          // 验证标题
          if (!title.value.trim()) {
            title.classList.add('invalid');
            titleError.style.display = 'block';
            isValid = false;
          } else {
            title.classList.remove('invalid');
            titleError.style.display = 'none';
          }

          // 验证链接
          if (!link.value.trim()) {
            link.classList.add('invalid');
            linkError.style.display = 'block';
            isValid = false;
          } else {
            link.classList.remove('invalid');
            linkError.style.display = 'none';
          }

          // 如果所有验证通过，提交表单
          if (isValid) {
            await saveData({
              link: { name: title.value || '', content: link.value || '', icon: icon.value || '' },
              tags: tags.value || '',
              description: description.value || '',
              note: note.value || '',
              linkTitle: title.value || '',
              linkUrl: link.value || '',
            });
          }
        });

        document.getElementById("view-saved").addEventListener('click', async function (e) {
          e.preventDefault();
          try {
            const result = await querySql(`select id from blocks where markdown like '%data-av-id="${config.avId}"%'`);
            if (!result || result.length === 0) {
              quickcommand.showMessageBox("未找到收藏文档，可能是块已被删除", "error");
              return;
            }
            utools.shellOpenExternal(`siyuan://blocks/${result[0].id}`);
          } catch (error) {
            console.error(error.message);
          }
        });

        // 删除收藏
        document.getElementById('btn-delete').addEventListener('click', async function (e) {
          e.preventDefault();
          if (await quickcommand.showConfirmBox("⚠️确认要删除吗？删除后不可恢复！", "警告", false, 450)) {
            const result = await requestApi("/api/av/removeAttributeViewBlocks", {
              "avID": config.avId,
              "srcIDs": [
                this.dataset.id
              ]
            });
            if (!result || result.code !== 0) {
              quickcommand.showMessageBox(result?.message || '删除失败', "error");
              return;
            }
            if (config.showNotification === 'yes') quickcommand.showMessageBox('删除成功', "success");
            if (config.isHideUtoolsWhenClose === 'yes') {
              utools.hideMainWindow();
            }
            utools.outPlugin();
          }
        });

        // 图标修改事件
        document.getElementById('linkIcon')?.addEventListener('input', async function (e) {
          document.getElementById('linkIconImg').src = this.value;
        });
        document.getElementById('linkIconImg')?.addEventListener('click', function () {
          utools.shellOpenExternal(this.src);
        });

        /////////////////////
        // 搜索输入框事件
        let isSearchInputComposing = false;
        searchInput.addEventListener('compositionstart', () => {
          isSearchInputComposing = true;
        });
        searchInput.addEventListener('compositionend', (e) => {
          isSearchInputComposing = false;
        });

        let searchTimeoutId;
        let highlightedIndex = -1; // 当前高亮项的索引
        const searchList = document.querySelector('#label-search-list');

        // 清除高亮样式
        function clearHighlight() {
          const items = searchList.querySelectorAll('.label-item');
          items.forEach(item => item.classList.remove('highlighted'));
          highlightedIndex = -1;
        }

        // 设置高亮项
        function setHighlight(index, items) {
          clearHighlight();
          if(index < 0) index = 0;
          if(index >= items.length) index = items.length - 1;
          if (index >= 0 && index < items.length) {
            items[index].classList.add('highlighted');
            highlightedIndex = index;
          }
        }

        searchInput.addEventListener('input', async (e) => {
          if (searchTimeoutId) clearTimeout(searchTimeoutId);
          searchTimeoutId = setTimeout(async () => {
            if (isSearchInputComposing) return;
            searchList.innerHTML = '';
            clearHighlight(); // 重置高亮
            const keywords = searchInput.value.trim();
            //if (!keywords) return;

            const links = keywords ? await searchLinks(keywords) : (config.showTopNWhenSearchInputEmpty === 'yes' ? await getTopN(defaultTopN||10) : []);
            if (links.length === 0) return;

            links.forEach(link => {
              const option = document.createElement('div');
              option.setAttribute('data-link', link.content);
              option.textContent = link.name;
              option.className = 'label-item';
              option.title = link.remark || '';
              option.onclick = () => {
                utools.shellOpenExternal(link.content);
              };
              searchList.appendChild(option);
            });
          }, 100);
        });

        // 键盘导航
        searchInput.addEventListener('keydown', (e) => {
          const items = Array.from(searchList.querySelectorAll('.label-item'));
          if (items.length === 0) return;

          if (e.key === 'ArrowDown') {
            e.preventDefault();
            highlightedIndex = Math.min(highlightedIndex + 1, items.length - 1);
            setHighlight(highlightedIndex, items);
            items[highlightedIndex] && items[highlightedIndex].scrollIntoView({ block: 'nearest' });
          } else if (e.key === 'ArrowUp') {
            e.preventDefault();
            highlightedIndex = Math.max(highlightedIndex - 1, -1);
            setHighlight(highlightedIndex, items);
            items[highlightedIndex] && items[highlightedIndex].scrollIntoView({ block: 'nearest' });
          } else if (e.key === 'Enter') {
            e.preventDefault();
            if (highlightedIndex >= 0 && highlightedIndex < items.length) {
              const link = items[highlightedIndex].getAttribute('data-link');
              utools.shellOpenExternal(link);
            }
          }
        });
        /////////////////////

        // 图标按钮被点击
        document.querySelector('#btn-linkIcon').addEventListener('click', async () => {
          const linkIconGroup = document.querySelector('#myForm .form-group:has(#linkIcon)');
          if (linkIconGroup?.style?.display === 'block') {
            linkIconGroup.style.display = 'none';
          } else {
            linkIconGroup.style.display = 'block';
          }
        });

        // 实时验证，当用户输入时清除错误状态
        document.getElementById('title').addEventListener('input', function () {
          if (this.value.trim()) {
            this.classList.remove('invalid');
            document.getElementById('title-error').style.display = 'none';
          }
        });

        document.getElementById('link').addEventListener('input', function () {
          if (this.value.trim()) {
            this.classList.remove('invalid');
            document.getElementById('link-error').style.display = 'none';
          }
        });

        // 标签选择功能
        const labelSelectBtn = document.querySelector('.btn-label-select');
        const labelList = document.getElementById('label-list');
        const tagsInput = document.getElementById('tags');
        const settingsBtn = document.querySelector('.settings-btn');
        const searchBtn = document.querySelector('.search-btn');

        // 点击设置按钮显示设置表单
        settingsBtn.addEventListener('click', function () {
          document.getElementById('myForm').classList.remove('show');
          document.getElementById('settings').classList.add('show');
        });

        // 点击搜索按钮显示搜索页面
        searchBtn.addEventListener('click', function () {
          document.getElementById('myForm').classList.remove('show');
          document.getElementById('search').classList.add('show');
          setTimeout(() => {
            searchInput.focus();
            if(!search.querySelector('#label-search-list').textContent.trim()) {
              searchInput.dispatchEvent(new InputEvent('input', { bubbles: true }));
            }
          }, 100);
        });

        // 表单页面关闭
        document.querySelector('#myForm .btn-cancel').addEventListener('click', function () {
          if(!this.clickHandled) this.clickHandled = true;
          if (config.isHideUtoolsWhenClose === 'yes') {
            utools.hideMainWindow();
          }
          utools.outPlugin();
        });

        // 设置页面关闭
        document.querySelector('#settings .btn-cancel').addEventListener('click', function () {
          if (isConfigPage) {
            if (config.isHideUtoolsWhenClose === 'yes') {
              utools.hideMainWindow();
            }
            utools.outPlugin();
          } else {
            document.getElementById('settings').classList.remove('show');
            document.getElementById('myForm').classList.add('show');
          }
        });

        // 搜索返回页面
        document.querySelector('#search #btn-search-back').addEventListener('click', function () {
          if (isSearchPage) {
            if (config.isHideUtoolsWhenClose === 'yes') {
              utools.hideMainWindow();
            }
            utools.outPlugin();
          } else {
            document.getElementById('search').classList.remove('show');
            document.getElementById('myForm').classList.add('show');
          }
        });

        // 初始化列表数据
        const initListData = () => {
          // 清除所有已有对号
          Array.from(labelList.querySelectorAll('[data-label]')).forEach(item => {
            const check = item.querySelector('span.checkmark');
            if (check) check.remove();
          });

          // 获取当前输入框中的标签
          const currentTags = tagsInput.value.trim();
          const tagsArray = currentTags.split(/[,，]/).map(tag => tag.trim()).filter(tag => tag);

          // 获取现有列表标签
          const existingLabels = Array.from(labelList.querySelectorAll('[data-label]')).map(item => item.getAttribute('data-label'));

          // 如果输入框里有新标签，添加到列表
          tagsArray.forEach(tag => {
            if (tag && !existingLabels.includes(tag)) {
              const div = document.createElement('div');
              div.setAttribute('data-label', tag);
              div.textContent = tag;
              div.className = 'label-item';
              labelList.appendChild(div);
            }
          });

          // 为已存在的标签添加对号
          Array.from(labelList.querySelectorAll('[data-label]')).forEach(item => {
            const label = item.getAttribute('data-label');
            if (tagsArray.includes(label)) {
              const span = document.createElement('span');
              span.textContent = ' ✓';
              span.className = 'checkmark';
              item.appendChild(span);
            }
          });
        };
        initListData();

        // === 新增：标签搜索功能（支持中文输入法） ===
        const labelSearchInput = labelList.querySelector('.label-search');
        let _isComposing = false;
        function filterLabelList(query) {
          const q = (query || '').trim().toLowerCase();
          const items = labelList.querySelectorAll('.label-item');
          items.forEach(item => {
            const label = (item.getAttribute('data-label') || '').toLowerCase();
            if (!q || label.indexOf(q) !== -1) {
              item.style.display = 'block';
            } else {
              item.style.display = 'none';
            }
          });
          // 过滤后重置选中索引
          selectedIndex = -1;
          updateActive(selectedIndex);
        }
        if (labelSearchInput) {
          labelSearchInput.addEventListener('compositionstart', () => {
            _isComposing = true;
          });
          labelSearchInput.addEventListener('compositionend', (e) => {
            _isComposing = false;
            filterLabelList(e.target.value);
          });
          labelSearchInput.addEventListener('input', (e) => {
            if (!_isComposing) filterLabelList(e.target.value);
          });
          // 支持 Esc 清空并关闭
          labelSearchInput.addEventListener('keydown', (e) => {
            if (_isComposing) return;
            if (e.key === 'Escape') {
              labelSearchInput.value = '';
              filterLabelList('');
              labelList.style.display = 'none';
              return;
            }
            // === 新增：上下键选择与回车选择 ===
            const visibleItems = Array.from(labelList.querySelectorAll('.label-item')).filter(it => it.style.display !== 'none');
            if (visibleItems.length === 0) return;
            if (e.key === 'ArrowDown') {
              e.preventDefault();
              // 移动到下一个
              if (selectedIndex < visibleItems.length - 1) {
                selectedIndex++;
              } else {
                selectedIndex = 0;
              }
              // 映射 selectedIndex 到实际元素索引
              updateActive(selectedIndex);
              return;
            }
            if (e.key === 'ArrowUp') {
              e.preventDefault();
              if (selectedIndex > 0) {
                selectedIndex--;
              } else {
                selectedIndex = visibleItems.length - 1;
              }
              updateActive(selectedIndex);
              return;
            }
            if (e.key === 'Enter') {
              e.preventDefault();
              if (selectedIndex >= 0 && selectedIndex < visibleItems.length) {
                const el = visibleItems[selectedIndex];
                // 触发点击事件以复用已有逻辑
                try {
                  el.dispatchEvent(new MouseEvent('click', { bubbles: true }));
                } catch (err) {
                  // fallback: call click()
                  try { el.click(); } catch (e) { /* ignore */ }
                }
              } else {
                // 如果没有选中项，尝试匹配完全相等的标签并选择第一个
                const q = (labelSearchInput.value || '').trim();
                if (q) {
                  const exact = Array.from(labelList.querySelectorAll('.label-item')).find(it => (it.getAttribute('data-label') || '') === q);
                  if (exact) {
                    try { exact.dispatchEvent(new MouseEvent('click', { bubbles: true })); } catch (e) { exact.click(); }
                  }
                }
              }
              return;
            }
            // === 新增结束 ===
          });
        }
        // === 新增结束 ===

        // 为键盘选中维护状态
        let selectedIndex = -1;
        function updateActive(idx) {
          const visibleItems = Array.from(labelList.querySelectorAll('.label-item')).filter(it => it.style.display !== 'none');
          // 清除所有 active
          Array.from(labelList.querySelectorAll('.label-item')).forEach(it => it.classList.remove('active'));
          if (idx >= 0 && idx < visibleItems.length) {
            const el = visibleItems[idx];
            el.classList.add('active');
            // 尽量让元素可见
            try { el.scrollIntoView({ block: 'nearest' }); } catch (e) { /* ignore */ }
          } else {
            selectedIndex = -1;
          }
        }

        // 点击选择按钮显示标签列表
        labelSelectBtn.addEventListener('click', function (e) {
          if (labelList.style.display === 'block') {
            labelList.style.display = 'none';
            return;
          }
          const rect = labelSelectBtn.getBoundingClientRect();
          labelList.style.top = rect.bottom + window.scrollY + 'px';
          labelList.style.display = 'block';
          labelList.style.left = rect.right - labelList.offsetWidth + window.scrollX + 'px';

          initListData();
          if (labelSearchInput) {
            labelSearchInput.value = '';
            filterLabelList('');
            // 尽量把焦点放到搜索输入上（方便用户输入）
            try { labelSearchInput.focus(); } catch (e) { /* ignore */ }
          }
        });

        // 点击标签添加到输入框
        labelList.addEventListener('click', function (e) {
          if (e.target && e.target.hasAttribute('data-label')) {
            const selectedLabelEl = e.target.closest('[data-label]');
            const selectedLabel = selectedLabelEl.getAttribute('data-label');
            const currentTags = tagsInput.value.trim();
            const tagsArray = currentTags.split(/[,，]/).map(tag => tag.trim()).filter(tag => tag);
            // 如果点击的是对号，表示取消该标签
            const checkmark = selectedLabelEl.querySelector('span.checkmark');
            if (checkmark) {
              const tag = selectedLabelEl.textContent.trim().replace('✓', '').trim();
              checkmark.remove();
              const index = tagsArray.indexOf(tag);
              if (index > -1) {
                tagsArray.splice(index, 1);
              }
              if (tagsArray.length === 0) {
                tagsInput.value = '';
              } else {
                tagsInput.value = tagsArray.join(', ');
              }
              labelList.style.display = 'none';
              return;
            }
            // 检查是否已存在该标签
            if (!tagsArray.includes(selectedLabel)) {
              if (currentTags === '') {
                tagsInput.value = selectedLabel;
              } else {
                // 统一使用英文逗号分隔
                tagsInput.value = currentTags.replace(/[,，]$/, '') + ', ' + selectedLabel;
              }
            }

            labelList.style.display = 'none';
          }
        });

        // 点击其他地方隐藏标签列表
        document.addEventListener('click', function (e) {
          if (!labelSelectBtn.contains(e.target) && !labelList.contains(e.target)) {
            labelList.style.display = 'none';
          }
          if (!avBtn.contains(e.target) && !avList.contains(e.target)) {
            avList.style.display = 'none';
          }
        });

        const notShowFormRadio = document.getElementById('notShowFormRadio');
        const tip = document.querySelector('.not-show-form-tip');
        // 设置初始状态
        tip.style.display = notShowFormRadio.checked ? 'inline' : 'none';
        // 委托到父元素，监听 change 事件
        document.querySelector('.form-group:has(#notShowFormRadio)').addEventListener('change', function (e) {
          if (e.target.name === 'showRadio') {
            tip.style.display = document.getElementById('notShowFormRadio').checked ? 'inline' : 'none';
          }
        });
      } catch (e) {
        console.error(e);
      }
    }
    main();

    // 抓取网页信息
    async function getWebInfo(href) {
      let json = { title: '', description: '', keywords: '', icon: '' };
      const userAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.76";

      try {
        let result;
        // 先获取快捷命令服务
        if (config.useQuickCommandServer && isBrowser && href.toLowerCase() === currentBrowserUrl.toLowerCase()) {
          if(quickCommandServerUrl) {
            // 快捷命令服务或思源内核扩展服务
            result = await forwardProxy(
              `${quickCommandServerUrl.replace(/\/$/, '')}/?r=${Date.now()}&action=getWebInfo`, 'GET', null,
              [{ 'User-Agent': userAgent }],
              10000, 'text/html'
            );
          } else {
            //思源读写文件api
            result = await getFile(webInfoCacheFile);
            if(result.includes('"code":404') && result.includes('no such file or directory')) {
              return json;
            }
          }
          result = result?.data?.body || result;
          if (result) {
            try {
              const newJson = JSON.parse(decodeURIComponent(result));
              if(newJson?.url === href) return newJson;
            } catch (e) {
              try {
                const newJson = JSON.parse(result);
                if(newJson?.url === href) return newJson;
              } catch (e) {
                //consolelog(e.stack)
              }
            }
          }
        }

        // 获取网络页面
        result = await forwardProxy(
          href, 'GET', null,
          [{ 'User-Agent': userAgent }],
          60000, 'text/html'
        );

        const data = result?.data;
        if (!data || Math.floor(data.status / 100) !== 2) {
          return json;
        }

        const html = data.body;
        if (!html || typeof html !== 'string') {
          return json;
        }

        // 1. 先用正则提取 head 标签部分
        const headMatch = html.match(/<head[^>]*>([\s\S]*?)<\/head>/i);
        let headContent = headMatch ? headMatch[1] : html;

        // 2. 用正则去除 script 和 style 标签及其内容
        headContent = headContent
          .replace(/<script[^>]*>[\s\S]*?<\/script>/gi, '')
          .replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '');

        // 3. 构造一个完整的 HTML 文档用于 DOMParser 解析
        const htmlDoc = `<!DOCTYPE html><html><head>${headContent}</head><body></body></html>`;

        // 4. 使用 DOMParser 解析
        const parser = new DOMParser();
        const doc = parser.parseFromString(htmlDoc, 'text/html');

        // 5. 通过 DOM 方法获取元信息
        // 获取 title
        const titleElement = doc.querySelector('title');
        if (titleElement) {
          json.title = titleElement.textContent.trim();
        }

        // 获取 description
        const descriptionMeta = doc.querySelector('meta[name="description" i]') ||
          doc.querySelector('meta[property="og:description" i]');
        if (descriptionMeta) {
          json.description = (descriptionMeta.getAttribute('content') || '').trim();
        }

        // 获取 keywords
        const keywordsMeta = doc.querySelector('meta[name="keywords" i]');
        if (keywordsMeta) {
          json.keywords = (keywordsMeta.getAttribute('content') || '').trim();
        }

        // 6. HTML 解码
        const decodeHtml = (str) => {
          const textarea = document.createElement('textarea');
          textarea.innerHTML = str;
          return textarea.value;
        };

        json.title = decodeHtml(json.title);
        json.description = decodeHtml(json.description);
        json.keywords = decodeHtml(json.keywords)
          ?.split(/[,，;；|\s]+/)
          ?.map(s => s.trim().toLowerCase())
          ?.filter(Boolean)
          ?.join(',');

        // 新增：尝试解析网站图标（favicon）URL
        try {
          // 优先查找常见的 icon link 标签
          const iconSelectorList = [
            'link[rel*="icon" i]',
            'link[rel="shortcut icon" i]',
            'link[rel="apple-touch-icon" i]',
            'link[rel="apple-touch-icon-precomposed" i]',
            'link[rel="mask-icon" i]'
          ];
          let foundHref = '';
          for (let sel of iconSelectorList) {
            const el = doc.querySelector(sel);
            if (el && el.getAttribute && el.getAttribute('href')) {
              foundHref = (el.getAttribute('href') || '').trim();
              if (foundHref) break;
            }
          }
          // 如果找到了 link href，规范化为绝对 URL
          if (foundHref) {
            // 处理 protocol-relative URL (e.g. //example.com/favicon.ico)
            if (/^\/\//.test(foundHref)) {
              try {
                const u = new URL(href);
                foundHref = u.protocol + foundHref;
              } catch (e) {
                // ignore
              }
            } else if (!/^[a-zA-Z][a-zA-Z0-9+.-]*:/.test(foundHref)) {
              // 相对路径，使用 base href 解析
              try {
                foundHref = new URL(foundHref, href).href;
              } catch (e) {
                // ignore
              }
            }
            json.icon = foundHref || '';
          } else {
            // 回退：尝试使用站点根目录的 /favicon.ico
            try {
              const u = new URL(href);
              json.icon = u.origin + '/favicon.ico';
            } catch (e) {
              json.icon = '';
            }
          }
        } catch (e) {
          console.error('favicon parse error', e);
        }

      } catch (error) {
        console.error('Error fetching or parsing web info:', error);
      }

      return json;
    }

    // 保存数据
    /*
    data = {
      link: {name: title.value, content: link.value},
      tags: tags.value,
      description: description.value,
      note: note.value
    }
    */
    async function saveData(data) {
      try {
        const keys = await requestApi("/api/av/getAttributeViewKeysByAvID", {
          avID: config.avId
        });
        if (!keys?.data) {
          console.error('保存失败');
          return;
        }
        let keyMap = {}, typeMap = {};
        keys.data.forEach(key => {
          if (key.type === 'mAsset' && key.name === colsMaps.link) { keyMap.link = key.id; typeMap.link = key.type; }
          if (key.type === 'mSelect' && key.name === colsMaps.tags) { keyMap.tags = key.id; typeMap.tags = key.type; }
          if (key.type === 'text' && key.name === colsMaps.description) { keyMap.description = key.id; typeMap.description = key.type; }
          if (key.type === 'block' && key.name === colsMaps.note) { keyMap.note = key.id; typeMap.note = key.type; }
          if (key.type === 'text' && key.name === colsMaps.linkTitle) { keyMap.linkTitle = key.id; typeMap.linkTitle = key.type; }
          if (key.type === 'text' && key.name === colsMaps.linkUrl) { keyMap.linkUrl = key.id; typeMap.linkUrl = key.type; }
        });
        if (await isExistLink(data.link.content)) {
          // 更新
          const row = await getRowByLink(data.link.content);
          let hasError = false;
          const cells = row.cells || row.values || [];
          for (const cell of cells) {
            const contentMap = {
              [colsMaps.description]: data.description,
              [colsMaps.note]: data.note,
              [colsMaps.linkTitle]: data.link.name,
              [colsMaps.linkUrl]: data.link.content,
            };
            let content = {
              "content": contentMap[cell.name] || '',
              //"content": contentMap[cell.name] || cell.value[cell.valueType]?.content || '',
            };
            // 处理资源类型
            if (cell.valueType === 'mAsset') {
              content = [
                {
                  type: "image",
                  name: '',
                  content: data.link.icon || '',
                  //content: data.link.icon || cell.value[cell.valueType]?.find(c => c.type === 'image')?.content || '',
                },
                {
                  type: "file",
                  name: data.link.name || cell.value[cell.valueType]?.find(c => c.type === 'file')?.name || '',
                  content: data.link.content,
                }
              ];
            }
            if (cell.valueType === 'mSelect') {
              const tags = cell.value[cell.valueType] || [];
              const tagNames = tags.map(t => t.content);
              const tagColors = tags.map(t => t.color).filter(t => t);
              const webTags = (data.tags || '').split(/[,，]/).map(t => t.trim()).filter(t => t);
              const getColor = createColorPicker(tagColors);
              const uniArr = [];
              const newTags = [];
              webTags.forEach(t => {
                if (!uniArr.includes(t)) {
                  let color = '';
                  if(tagNames.includes(t)) {
                    color = tags.find(t2 => t2.content === t)?.color || getColor();
                  } else {
                    color = getColor();
                  }
                  newTags.push({ "content": t, "color": color + '' });
                  uniArr.push(t);
                }
              });
              content = newTags; //tags;
            }
            const res = await requestApi("/api/av/setAttributeViewBlockAttr", {
              avID: config.avId,
              keyID: cell.value.keyID,
              itemID: row.id,
              cellID: cell.value.id,
              value: { [cell.valueType]: content },
            });
            if (!res || res.code !== 0) {
              hasError = true;
            }
          }
          if (hasError) {
            console.error('有部分字段保存失败');
            return;
          }
          if (config.showNotification === 'yes') utools.showNotification('✅保存成功');
          utools.hideMainWindow();
          utools.outPlugin();
        } else {
          // 新增
          const values = [];
          for (const [key, value] of Object.entries(data)) {
            let content = { "content": value };
            // 处理资源类型
            if (typeMap[key] === 'mAsset') {
              content = [
                {
                  type: "image",
                  name: '',
                  content: value.icon || '',
                },
                {
                  type: "file",
                  name: value.name || '',
                  content: value.content || '',
                }
              ];
            }
            if (typeMap[key] === 'mSelect') {
              const tags = (value || '').split(/[,，]/).map(t => t.trim()).filter(t => t);
              let tagsContent = [];
              const getColor = createColorPicker();
              tags.forEach(tag => {
                tagsContent.push({ "content": tag, "color": getColor() + '' });
              });
              content = tagsContent;
            }
            values.push({
              "keyID": keyMap[key],
              [typeMap[key]]: content
            });
          }
          const input = {
            "avID": config.avId,
            "blocksValues": [values]
          }
          const result = await requestApi('/api/av/appendAttributeViewDetachedBlocksWithValues', input);
          if (!result || result.code !== 0) {
            console.error('保存失败', result);
            return;
          }
          if (config.showNotification === 'yes') utools.showNotification('✅收藏成功');
          utools.hideMainWindow();
          utools.outPlugin();
        }
      } catch (e) {
        console.error('保存失败', e.message);
      }
    }

    // 获取收藏信息
    async function isExistLink(link) {
      const data = await requestApi('/api/av/renderAttributeView', {
        "id": config.avId,
        "query": link,
        "pageSize": 500,
      });
      const count = data?.data?.view?.rowCount || data?.data?.view?.cardCount;
      if(count === 0) return false;
      // 判定是否存在link地址
      const linkName = colsMaps.link;
      const linkKeyID = data?.data?.view?.columns?.find(c => c.name === linkName)?.id;
      if (data?.data?.view?.group) {
        const groupList = data?.data?.view?.groups;
        groupList.forEach(group => {
          const row = group?.rows?.find(r => r.cells?.find(c => c.value.keyID === linkKeyID && c.value?.mAsset?.find(c=> c.type === 'file' && c.content === link)));
          if(row) return true;
        });
      }
      const row = data?.data?.view?.rows?.find(r => (r.cells||r.values)?.find(c => c.value.keyID === linkKeyID && c.value?.mAsset?.find(c=> c.type === 'file' && c.content === link)));
      if (row) return true;
      return false;
    }

    // 获取顶部10条
    async function getTopN(n = 10) {
      return searchLinks('', n);
    }

    // 查询并返回链接列表
    async function searchLinks(keywords, pageSize = 1000) {
      const data = await requestApi('/api/av/renderAttributeView', {
        "id": config.avId,
        "query": keywords,
        "pageSize": pageSize,
      });
      let rows = [];
      if (data?.data?.view?.group) {
        const links = [];
        const groupList = data?.data?.view?.groups;
        groupList.forEach(group => {
          group.rows.forEach(row => {
            const remark = row.cells.find(cell => cell.valueType === "block")?.value?.block?.content || '';
            const linkCell = row.cells.find(cell => cell.valueType === "mAsset");
            const link = linkCell.value["mAsset"].find(c => c.type === 'file');
            if (!links.includes(link.content)) {
              link.remark = remark;
              rows.push(link);
              links.push(link.content);
            }
          });
        });
      } else {
        const rowList = data?.data?.view?.rows || data?.data?.view?.cards;
        rowList.forEach(row => {
          const remark = (row.cells || row.values).find(cell => cell.valueType === "block")?.value?.block?.content || '';
          const linkCell = (row.cells || row.values).find(cell => cell.valueType === "mAsset");
          const link = linkCell.value["mAsset"].find(c => c.type === 'file');
          link.remark = remark;
          rows.push(link);
        });
      }
      return rows;
    }

    // 同时支持表格row.cells和卡片row.values和分组groups.rows
    async function getRowByLink(link) {
      const data = await requestApi('/api/av/renderAttributeView', {
        "id": config.avId,
        "query": link,
        "pageSize": 500,
      });
      if (!(data?.data?.view?.rowCount || data?.data?.view?.cardCount)) return [];
      const rowFiled = data?.data?.viewType === 'gallery' ? 'cards' : 'rows';
      const columns = data?.data?.viewType === 'gallery' ? 'fields' : 'columns';
      // 取查询到的第一条数据
      let rows = data.data.view[rowFiled];
      // 获取分组数据
      if (data.data.view.group) {
        const newRows = [];
        for (const group of data.data.view.groups) {
          if (group.rows.length) newRows.push(...group.rows);
        }
        rows = newRows;
      }
      // 获取置顶列行数据，这里是link列
      const cols = data.data.view[columns];
      const colName = colsMaps.link;
      const colId = cols.find(c => c.name === colName)?.id;
      const row = rows.find(r => (r.cells || r.values).find(c => c.value.keyID === colId && c.value?.mAsset?.find(c=> c.type === 'file' && c.content === link)));
      if (!row) return [];
      // 只保留需要的列
      const colNames = Object.values(colsMaps);
      const colIds = cols.filter(c => colNames.includes(c.name)).map(c => c.id);
      row.cells = (row.cells || row.values).filter(c => colIds.includes(c.value.keyID));
      const colIdNameMap = {};
      cols.forEach(c => colIdNameMap[c.id] = c.name);
      row.cells.forEach(c => c.name = colIdNameMap[c.value.keyID]);
      return row;
    }

    // 获取常用标签
    async function getAllTags(avId) {
      const data = await requestApi('/api/av/renderAttributeView', {
        "id": avId,
        "query": "",
        "pageSize": 1,
      });
      if (!data.data) return [];
      return getTags(data);
    }

    function getTags(resp) {
      const columns = resp.data.viewType === 'gallery' ? 'fields' : 'columns';
      if (!resp || !resp.data || !resp.data.view || !Array.isArray(resp.data.view[columns])) return [];
      const col = resp.data.view[columns].find(c => c.type === 'mSelect' && c.name === colsMaps.tags);
      if (!col) return [];
      if (!Array.isArray(col.options)) return [];
      return col.options.map(opt => opt && opt.name).filter(Boolean);
    }

    function getAvsByAvIds(avIds) {
      const ids = Array.isArray(avIds) ? avIds : avIds.split(/[,，]/).map(id => id.trim()).filter(Boolean);
      if (ids.length === 0) return [];
      const subQueries = ids.map(avId => `
        SELECT
          SUBSTR(TRIM(content), 1, INSTR(TRIM(content) || ' ', ' ') - 1) AS name,
          '${avId}' AS id
        FROM blocks
        WHERE markdown LIKE '%data-av-id="${avId}"%'
      `);
      const sql = subQueries.join(' UNION ALL ');
      const result = querySql(sql);
      return result;
    }

    // 通过思源代理访问，解决跨域问题
    async function forwardProxy(url, method = 'GET', payload = {}, headers = [], timeout = 7000, contentType = 'text/html') {
      const data = {
        url: url,
        method: method,
        timeout: timeout,
        contentType: contentType,
        headers: headers,
        payload: payload
      };
      return requestApi('/api/network/forwardProxy', data);
    }

    async function querySql(sql) {
      const result = await requestApi('/api/query/sql', { "stmt": sql });
      if (result.code !== 0) {
        console.error("查询数据库出错", result.msg);
        return [];
      }
      return result.data;
    }

    // api请求
    async function requestApi(url, data, method = 'POST') {
      headers = { 'Content-Type': 'application/json' };
      if (config?.token) headers['Authorization'] = 'token ' + config.token;
      url = url.toLowerCase().startsWith('http') ? url : apiUrlPort.trim().replace(/\/+$/, '') + '/' + url.replace(/^\/+/, '');
      try {
        return await (await fetch(url, {
          method: method,
          headers: headers,
          body: JSON.stringify(data || {})
        })).json();
      } catch (e) {
        // 如果加载时报错可能导致关闭按钮无响应，这里重新绑定一下
        if(!this.clickHandled) document.querySelector('#myForm .btn-cancel').addEventListener('click', function () {
          this.clickHandled = true;
          if (config.isHideUtoolsWhenClose === 'yes') {
            utools.hideMainWindow();
          }
          utools.outPlugin();
        });
        throw new Error('请检查思源是否已正常启动！'+ e.message);
      }
    }

    async function getFile(path, type = 'text') {
      headers = { 'Content-Type': 'application/json' };
      if (config?.token) headers['Authorization'] = 'token ' + config.token;
      const url = apiUrlPort.trim().replace(/\/+$/, '');
      return fetch(url+"/api/file/getFile", {
          method: "POST",
          headers: headers,
          body: JSON.stringify({ path }),
      }).then((response) => {
          if (response.ok) {
              if(type==='json') return response.json();
              else if(type==='blob') return response.blob();
              else return response.text();
          } else {
              throw new Error("Failed to get file content");
          }
      }).catch((error) => {
          console.error(error);
      });
    }

    function createColorPicker(excludeColors = []) {
      // 1-13 共13种颜色
      let colors = Array.from({ length: 13 }, (_, i) => i + 1); // [1,2,...,13]
      if (excludeColors.length < 13) {
        // 排除已有颜色
        colors = colors.filter(c => !excludeColors.includes(c + ''));
      }
      return function getRandColor() {
        if (colors.length === 0) {
          // 数组空了，重置
          colors = Array.from({ length: 13 }, (_, i) => i + 1);
        }

        // 随机索引
        const index = Math.floor(Math.random() * colors.length);
        // 取出并删除该元素
        const color = colors.splice(index, 1)[0];

        return color;
      };
    }

    function reorderAvIdsStrict(confAvIdsStr, targetId) {
      const ids = confAvIdsStr.split(/[,，]/).map(id => id.trim()).filter(Boolean);

      // 如果 targetId 不在原列表中，返回原列表（或报错/忽略）
      if (!ids.includes(targetId)) {
        return ids.join(','); // 或 throw new Error(`ID ${targetId} not found`);
      }

      const restIds = ids.filter(id => id !== targetId);
      return [targetId, ...restIds].join(',');
    }
    function consolelog(args) {
      console.log(JSON.stringify(args));
      utools.copyText(JSON.stringify(args));
    }
    function readClipboard() {
      const html = document.body.innerHTML;
      // 匹配标记之间的内容
      const regex = new RegExp('<!--\\[\\[TEMPLATE-CLIPBOARD-DATA\\[\\[-->([\\s\\S]*?)<!--\\]\\]TEMPLATE-CLIPBOARD-DATA\\]\\]-->', 'i');
      const match = html.match(regex);
      if (match && match[1] !== undefined) {
        return match[1].trim();
      }
      return "";
    }
  </script>
</body>

</html>